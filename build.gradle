plugins {
    id 'fabric-loom' version '0.10.58'
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "7.1.0"
}

version = project.mod_version
group = project.maven_group

repositories {
    flatDir {
        dirs '/home/eric/PanelStudio/panelstudio-mc17/build/libs'
        dirs '/home/eric/Idea-Libraries'

    }
    maven {
        name = "meteor-maven-snapshots"
        url = "https://maven.meteordev.org/snapshots"
    }
    maven {
        name = "sonatype-oss-snapshots"
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Text API
    include(modImplementation("net.kyori:adventure-platform-fabric:4.1.0-SNAPSHOT"))

    //Integrate with baritone
    include(modImplementation("baritone:baritone-unoptimized-fabric:1.7.1"))

    //Integrate with viaversion
    include(modImplementation("com.viaversion.viafabric:viafabric:0.4.4+236:main"))
    include(modImplementation("com.viaversion.viafabric:viafabric-mc117:0.4.4+236:main"))
    include(modImplementation("com.viaversion.viaversion:viaversion:4.1.0-21w43a:SNAPSHOT"))
    include(modImplementation("org.yaml.snakeyml:snakeyaml:1.29"))

    //For Json
    include(modImplementation ("com.fasterxml.jackson.core:jackson-core:2.13.+"))
    include(modImplementation ("com.fasterxml.jackson.core:jackson-databind:2.13.+"))
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 16
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

test {
    useJUnitPlatform()
}
